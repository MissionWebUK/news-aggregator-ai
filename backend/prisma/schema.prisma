// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGO_URI")
}

model User {
  id            String   @id @map("_id") @default(auto()) @db.ObjectId
  email         String   @unique
  name          String?
  image         String?
  password      String?  // ✅ Allow nullable for OAuth users
  emailVerified DateTime?
  accounts      Account[]
  sessions      Session[]
  preferences   Preference?
}

model Account {
  id                String  @id @map("_id") @default(auto()) @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String

  access_token      String?
  expires_at        Int?
  token_type        String?
  id_token          String?
  refresh_token     String?
  scope             String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @map("_id") @default(auto()) @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @map("_id") @default(auto()) @db.ObjectId
  identifier String   @unique
  token      String   @unique
  expires    DateTime
}

model NewsArticle {
  id          String   @id @map("_id") @default(auto()) @db.ObjectId
  title       String
  url         String   @unique  // ✅ Ensure URL is unique
  source      String
  publishedAt DateTime
  content     String?
  keywords    String[]
  category    String?
  relevance   Float?
  urlToImage  String?  // ✅ Add field for article images
  summary     String?  // ✅ Add field for AI-generated summaries
}

model UserRecommendation {
  id          String   @id @map("_id") @default(auto()) @db.ObjectId
  userId      String   @db.ObjectId
  articleId   String   @db.ObjectId
  relevanceScore Float
  seen        Boolean @default(false)
  clicked     Boolean @default(false)
  liked       Boolean @default(false)
  
  @@unique([userId, articleId]) // Ensure unique user-article pair
}

model Preference {
  id         String   @id @map("_id") @default(auto()) @db.ObjectId
  userId     String   @unique @db.ObjectId
  categories String[]
  keywords   String[]
  updatedAt  DateTime @updatedAt

  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}